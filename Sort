private int[] bubbleSort(int[] data){
       for(int i=0; i < data.length; i++){
           for (int j=0; j < data.length -1; j++){
               int temp = 0;
               if (data[j] > data[j+1]){
                   temp  = data[j];
                   data[j] = data[j+1];
                   data[j+1] = temp;
               }
           }
       }
       return data;
    }

    private int[] chooseSort(int[] data){
        for (int i=0; i < data.length; i++){
            int temp =data[i];
            int pos = i;
            for (int j= i+1; j < data.length; j++){
                if (data[j] < temp){
                    temp = data[j];
                    pos = j;
                }
            }
            data[pos] = data[i];
            data[i] = temp;
        }
        return data;
    }

    private int[] insertSort(int[] data){
        int temp;
        for (int i=0; i< data.length - 1; i++){
            for (int j = 1 ; j < i +1 ; j++){
                if (data[i+1-j] > data[i+2-j]){
                    temp = data[i+1-j];
                    data[i+2-j] = data[i+1-j];
                    data[i+1-j] = temp;
                }
            }
        }
        return data;
    }

    private int[] quickSort(int[] data, int begin, int end){
        int i=begin;
        int j=end;
        int key = data[begin];
         while (i < j){
             while (i< j && data[j] > key){
                 j--;
             }
             if (i < j && data[j] < key){
                 data[i] = data[j];
             }
             while (i<j && data[i] < key){
                 i++;
             }
             if (i<j && data[i] > key){
                 data[j] = data[i];
             }
             data[i] = key;
             quickSort(data, begin, i-1);
             quickSort(data, i+1, end);
         }
        return data;
    }

    private int[] mergeSort(int[] data){
        return null;
    }

    private int[] shellSort(int[] data){
        return null;
    }

    private int[] heapSort(int[] data){
        return null;
    }

    private int[] bucketSort(int[] data){
        return null;
    }

    private int[] countSort(int[] data){
        return null;
    }

    private int[] radixSort(int[] data){
        return null;
    }
